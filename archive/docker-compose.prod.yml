# Production configuration for docker-compose
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  # Production Redis with persistence and memory optimization
  redis:
    command: redis-server --appendonly yes --maxmemory ${REDIS_MEMORY_LIMIT:-512m} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-512m}
        reservations:
          memory: 256m
    restart: always

  # Production API with resource limits and health checks
  api:
    environment:
      - GIN_MODE=release
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_DEBUG_LOGS=false
    deploy:
      replicas: ${API_REPLICAS:-1}
      resources:
        limits:
          memory: ${API_MEMORY_LIMIT:-512m}
          cpus: '1.0'
        reservations:
          memory: 256m
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: always

  # Production workers with resource limits and scaling
  worker:
    deploy:
      replicas: ${WORKER_REPLICAS:-3}
      resources:
        limits:
          memory: ${WORKER_MEMORY_LIMIT:-1g}
          cpus: '2.0'
        reservations:
          memory: 512m
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: always
    environment:
      - NODE_ENV=production
      - PLAYWRIGHT_HEADLESS=true
      - DEBUG=false

  # Remove individual worker services in production (use scaling instead)
  worker-2:
    profiles:
      - disabled
  
  worker-3:
    profiles:
      - disabled

  # Production frontend with resource limits
  frontend:
    environment:
      - REACT_APP_API_URL=${FRONTEND_API_URL:-/api/v1}
      - REACT_APP_ENABLE_DEVTOOLS=false
      - REACT_APP_LOG_LEVEL=error
    deploy:
      replicas: ${FRONTEND_REPLICAS:-1}
      resources:
        limits:
          memory: ${FRONTEND_MEMORY_LIMIT:-256m}
          cpus: '0.5'
        reservations:
          memory: 128m
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: always
    # Remove port mapping (traffic goes through nginx-proxy)
    ports: []

  # Enable nginx reverse proxy for production
  nginx-proxy:
    profiles: []  # Remove profile restriction
    environment:
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-1024}
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.5'
        reservations:
          memory: 128m
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    restart: always

  # Disable Redis Commander in production
  redis-commander:
    profiles:
      - debug
      - disabled

# Production volumes with backup-friendly configuration
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-./data/redis}
  
  worker_downloads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOWNLOADS_PATH:-./data/downloads}