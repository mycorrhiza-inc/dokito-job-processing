services:

  # Redis service for job queuing and communication
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - jobrunner_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Go API server
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-8080}:8080"
    user: "1000:1000"
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_JOB_QUEUE=${REDIS_JOB_QUEUE:-jobrunner:jobs}
      - REDIS_STATUS_STREAM=${REDIS_STATUS_STREAM:-jobrunner:status}
      - REDIS_LOG_STREAM=${REDIS_LOG_STREAM:-jobrunner:logs}
      - DATABASE_URL=${SUPABASE_DATABASE_URL:-${DATABASE_URL}}
      - SUPABASE_URL=${SUPABASE_PROJECT_URL:-${SUPABASE_URL}}
      - SUPABASE_ANON_KEY=${SUPABASE_PROD_ANON_KEY:-${SUPABASE_ANON_KEY}}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_PROD_SERVICE_ROLE_KEY:-${SUPABASE_SERVICE_ROLE_KEY}}
      - PORT=${API_PORT:-8080}
      - GIN_MODE=release
    depends_on:
      - redis
    networks:
      - jobrunner_network
    volumes:
      - shared_logs:/shared/logs
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Dokito Backend Processing Monolith
  dokito-backend:
    build:
      context: ./dokito-backend
      dockerfile: Dockerfile
    ports:
      - "${DOKITO_BACKEND_PORT:-8123}:8123"
    environment:
      - PORT=8123
      - DATABASE_URL=${SUPABASE_DATABASE_URL:-${DATABASE_URL}}
      - SUPABASE_URL=${SUPABASE_PROJECT_URL:-${SUPABASE_URL}}
      - SUPABASE_ANON_KEY=${SUPABASE_PROD_ANON_KEY:-${SUPABASE_ANON_KEY}}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_PROD_SERVICE_ROLE_KEY:-${SUPABASE_SERVICE_ROLE_KEY}}
      - OPENSCRAPERS_S3_OBJECT_BUCKET=${OPENSCRAPERS_S3_OBJECT_BUCKET}
      - DIGITALOCEAN_S3_CLOUD_REGION=${DIGITALOCEAN_S3_CLOUD_REGION}
      - DIGITALOCEAN_S3_ENDPOINT=${DIGITALOCEAN_S3_ENDPOINT}
      - DIGITALOCEAN_S3_ACCESS_KEY=${DIGITALOCEAN_S3_ACCESS_KEY}
      - DIGITALOCEAN_S3_SECRET_KEY=${DIGITALOCEAN_S3_SECRET_KEY}
      - DEEPINFRA_API_KEY=${DEEPINFRA_API_KEY}
      - PUBLIC_SAFE_MODE=false
    networks:
      - jobrunner_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Scalable Playwright worker service
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    user: "1000:1000"
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_JOB_QUEUE=${REDIS_JOB_QUEUE:-jobrunner:jobs}
      - REDIS_STATUS_STREAM=${REDIS_STATUS_STREAM:-jobrunner:status}
      - REDIS_LOG_STREAM=${REDIS_LOG_STREAM:-jobrunner:logs}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-3}
      - NODE_ENV=production
      - DOKITO_BACKEND_URL=http://dokito-backend:8123
      - DATABASE_URL=${SUPABASE_DATABASE_URL:-${DATABASE_URL}}
      - SUPABASE_URL=${SUPABASE_PROJECT_URL:-${SUPABASE_URL}}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_PROD_SERVICE_ROLE_KEY:-${SUPABASE_SERVICE_ROLE_KEY}}
      - REDIS_WAIT_TIMEOUT=${REDIS_WAIT_TIMEOUT:-60}
    depends_on:
      dokito-backend:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - worker_downloads:/app/downloads
      - shared_logs:/shared/logs
    networks:
      - jobrunner_network
    restart: unless-stopped
    deploy:
      replicas: ${WORKER_REPLICAS:-3}
      resources:
        limits:
          memory: ${WORKER_MEMORY_LIMIT:-1g}
          cpus: '2.0'
        reservations:
          memory: 512m
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend-next
      dockerfile: Dockerfile
      target: production
      platforms:
        - linux/amd64
        - linux/arm64
    ports:
      - "${FRONTEND_PROD_PORT:-8333}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT:-8080}/api/v1
      - NODE_ENV=production
      - PORT=3000
      # Supabase configuration for frontend
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_PROJECT_URL:-${SUPABASE_URL}}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_PROD_ANON_KEY:-${SUPABASE_ANON_KEY}}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - jobrunner_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health.html" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx-proxy:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api
    networks:
      - jobrunner_network
    restart: unless-stopped
    profiles:
      - production


volumes:
  worker_downloads:
    driver: local
  redis_data:
    driver: local
  shared_logs:
    driver: local

networks:
  jobrunner_network:
    driver: bridge