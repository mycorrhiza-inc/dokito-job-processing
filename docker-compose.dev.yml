# Development configuration for docker-compose
# Use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# Requires Supabase to be running locally (use 'just supabase-start')

services:

  # Init container to fix shared volume permissions
  logs-init:
    image: alpine:latest
    command: ["sh", "-c", "chown -R 1000:1000 /shared/logs && chmod -R 755 /shared/logs"]
    volumes:
      - shared_logs:/shared/logs
    restart: "no"

  # Redis service for development
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    networks:
      - jobrunner_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "no"  # Don't auto-restart in development

  # Development API with debug mode and hot reload
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: development  # Use development stage if multi-stage build exists
    user: "1000:1000"
    environment:
      - GIN_MODE=debug
      - LOG_LEVEL=debug
      - ENABLE_DEBUG_LOGS=true
      - CORS_ALLOWED_ORIGINS=${DEV_FRONTEND_URL:-http://localhost:3333},http://localhost:3001
      # Redis connection for development
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_JOB_QUEUE=${REDIS_JOB_QUEUE:-jobrunner:jobs}
      - REDIS_STATUS_STREAM=${REDIS_STATUS_STREAM:-jobrunner:status}
      - REDIS_LOG_STREAM=${REDIS_LOG_STREAM:-jobrunner:logs}
      # Supabase connection using local development instance
      - DATABASE_URL=${SUPABASE_DB_URL}
      - SUPABASE_URL=${SUPABASE_URL:-http://localhost:54321}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      # Dokito backend connection
      - DOKITO_BACKEND_URL=http://dokito-backend:8123
    ports:
      - "${API_PORT:-8080}:8080"
      - "${DELVE_DEBUG_PORT:-2345}:2345"  # Delve debugger port for Go debugging
    volumes:
      - ./api:/app  # Mount source code for hot reload (if supported)
      - shared_logs:/shared/logs  # Shared logs volume
    restart: "no"  # Don't auto-restart in development
    depends_on:
      - redis
      - logs-init
      - dokito-backend
    networks:
      - jobrunner_network
      - supabase_network_jobrunner

  # Development frontend with live reload
  frontend:
    build:
      context: ./frontend-next
      dockerfile: Dockerfile
      target: development  # Use development target
      platforms:
        - linux/amd64
        - linux/arm64
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT:-8080}/api/v1
      - NODE_ENV=development
      - PORT=${FRONTEND_DEV_PORT:-3333}
      - CHOKIDAR_USEPOLLING=true  # For Docker file watching
      # Supabase configuration for frontend
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL:-http://localhost:54321}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    ports:
      - "${FRONTEND_DEV_PORT:-3333}:${FRONTEND_DEV_PORT:-3333}"
    volumes:
      - ./frontend-next/src:/app/src
      - ./frontend-next/public:/app/public
      - ./frontend-next/package.json:/app/package.json
      - ./frontend-next/next.config.ts:/app/next.config.ts
      - ./frontend-next/tsconfig.json:/app/tsconfig.json
      - ./frontend-next/postcss.config.mjs:/app/postcss.config.mjs
      - /app/node_modules  # Anonymous volume to prevent overwriting
    stdin_open: true
    tty: true
    restart: "no"
    networks:
      - jobrunner_network

  # Dokito Backend Processing Monolith (Development)
  dokito-backend:
    build:
      context: ./dokito-backend
      dockerfile: Dockerfile
    ports:
      - "${DOKITO_BACKEND_PORT:-8123}:8123"
    environment:
      - PORT=8123
      - DATABASE_URL=${SUPABASE_DB_URL}
      - SUPABASE_URL=${SUPABASE_URL:-http://localhost:54321}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - OPENSCRAPERS_S3_OBJECT_BUCKET=${OPENSCRAPERS_S3_OBJECT_BUCKET}
      - DIGITALOCEAN_S3_CLOUD_REGION=${DIGITALOCEAN_S3_CLOUD_REGION}
      - DIGITALOCEAN_S3_ENDPOINT=${DIGITALOCEAN_S3_ENDPOINT}
      - DIGITALOCEAN_S3_ACCESS_KEY=${DIGITALOCEAN_S3_ACCESS_KEY}
      - DIGITALOCEAN_S3_SECRET_KEY=${DIGITALOCEAN_S3_SECRET_KEY}
      - DEEPINFRA_API_KEY=${DEEPINFRA_API_KEY}
      - PUBLIC_SAFE_MODE=false
      - RUST_LOG=debug
    networks:
      - jobrunner_network
      - supabase_network_jobrunner
    restart: "no"  # Don't auto-restart in development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development workers with source mounting and debugging
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
      target: development
    user: "1000:1000"
    environment:
      - NODE_ENV=development
      - DEBUG=*
      - WORKER_CONCURRENCY=1  # Lower concurrency for debugging
      - PLAYWRIGHT_HEADLESS=true  # Always run headless in containers
      # Redis connection for worker
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_JOB_QUEUE=${REDIS_JOB_QUEUE:-jobrunner:jobs}
      - REDIS_STATUS_STREAM=${REDIS_STATUS_STREAM:-jobrunner:status}
      - REDIS_LOG_STREAM=${REDIS_LOG_STREAM:-jobrunner:logs}
      - REDIS_WAIT_TIMEOUT=${REDIS_WAIT_TIMEOUT:-60}
      # Supabase connection for worker
      - DATABASE_URL=${SUPABASE_DB_URL}
      - SUPABASE_URL=${SUPABASE_URL:-http://localhost:54321}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      # Dokito backend connection
      - DOKITO_BACKEND_URL=http://dokito-backend:8123
    volumes:
      - ./worker:/app
      - /app/node_modules
      - shared_logs:/shared/logs  # Shared logs volume
    restart: "no"
    depends_on:
      - redis
      - logs-init
    networks:
      - jobrunner_network
      - supabase_network_jobrunner

  worker-2:
    profiles:
      - scaling  # Only enable when testing scaling

  worker-3:
    profiles:
      - scaling  # Only enable when testing scaling


  # Disable nginx proxy in development (direct access to services)
  nginx-proxy:
    profiles:
      - disabled

# Development-specific volumes
volumes:
  worker_downloads:
    driver: local
  redis_dev_data:
    driver: local
  shared_logs:
    driver: local

# Networks for development
networks:
  # External Supabase network (created by Supabase CLI)
  supabase_network_jobrunner:
    external: true
